#!/bin/bash

# 更新和升级系统
sudo apt update && sudo apt upgrade -y

# 安装依赖项
sudo apt-get install -y git curl build-essential make jq gcc snapd chrony lz4 tmux unzip bc

# 安装 GO
rm -rf $HOME/go
sudo rm -rf /usr/local/go
cd $HOME
curl -L https://dl.google.com/go/go1.21.8.linux-amd64.tar.gz | sudo tar -C /usr/local -zxvf -
cat <<'EOF' >>$HOME/.profile
export GOROOT=/usr/local/go
export GOPATH=$HOME/go
export GO111MODULE=on
export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin
EOF
source $HOME/.profile

# 验证 GO 安装
go version

# 安装 Airchains
cd $HOME
wget https://github.com/airchains-network/junction/releases/download/v0.1.0/junctiond
chmod +x junctiond
sudo mv junctiond /usr/local/bin/
cd $HOME

# 验证 Airchains 安装
junctiond version

# 设置链条并命名空气链
CHAIN_NAME="acc"
junctiond init $CHAIN_NAME --chain-id junction

# 下载 Genesis 和地址簿
curl -Ls https://node39.top/testnet/airchains/genesis.json > $HOME/.junction/config/genesis.json
curl -s https://snapshots-testnet.nodejumper.io/airchains-testnet/addrbook.json > $HOME/.junction/config/addrbook.json

# 配置节点
PEERS="560162c4502aea50d271b66d220fadeb5cd17038@37.27.68.29:22656,fa60f4730929eae83d00d9e21bb780b4defe6d03@89.58.28.79:11656,aeaf101d54d47f6c99b4755983b64e8504f6132d@65.21.202.124:28656,ed0fb297a9c8475bb4afacafdea5cf70aa2792d6@65.109.115.15:63656,3250f8c73d5ded86fa5d0a7b78e84715b9c03643@88.198.46.55:19656,7419a1b9753309f5f9d3c62daf882854cc0d7642@152.53.3.95:26656,2699379c4f0e3a17cf1cf6c6ed7f6a79a8fbb562@162.19.235.100:50512,82b3454d6b052703ffd0c7cafea8f69b04e700c3@161.97.145.120:26656,47f61921b54a652ca5241e2a7fc4ed8663091e89@178.63.18.157:19656,a9716527bc0c334553ff0e7df27cd9196bb89f30@92.118.58.126:43456"
sed -i 's|^persistent_peers *=.*|persistent_peers = "'$PEERS'"|' $HOME/.junction/config/config.toml

# 优化配置文件以提高性能
sed -i 's/^max_num_inbound_peers = .*/max_num_inbound_peers = 100/' $HOME/.junction/config/config.toml
sed -i 's/^max_num_outbound_peers = .*/max_num_outbound_peers = 100/' $HOME/.junction/config/config.toml
sed -i 's/^timeout_commit = ".*"/timeout_commit = "1s"/' $HOME/.junction/config/config.toml
sed -i 's/^snapshot-interval = .*/snapshot-interval = 1000/' $HOME/.junction/config/app.toml
sed -i 's/^indexer = .*/indexer = "null"/' $HOME/.junction/config/config.toml

# 创建服务
sudo tee /etc/systemd/system/junctiond.service > /dev/null <<EOF
[Unit]
Description=junctiond
After=network-online.target
[Service]
User=root
ExecStart=$(which junctiond) start
Restart=always
RestartSec=3
LimitNOFILE=65535
[Install]
WantedBy=multi-user.target
EOF

sudo systemctl daemon-reload
sudo systemctl enable junctiond

# 设置最低气体
sed -i 's|minimum-gas-prices =.*|minimum-gas-prices = "0.0001amf"|g' $HOME/.junction/config/app.toml

# 函数：检查并修复数据库
function check_and_repair_db() {
    echo "检查并修复数据库..."
    junctiond unsafe-reset-all --home $HOME/.junction
}

# 下载快照
sudo systemctl stop junctiond
cp $HOME/.junction/data/priv_validator_state.json $HOME/.junction/priv_validator_state.json.backup
SNAPSHOT_FILE="$HOME/airchains-testnet_latest.tar.lz4"
curl -L https://snapshots-testnet.nodejumper.io/airchains-testnet/airchains-testnet_latest.tar.lz4 -o $SNAPSHOT_FILE
lz4 -dc $SNAPSHOT_FILE | tar -xf - -C $HOME/.junction
rm -f $SNAPSHOT_FILE
mv $HOME/.junction/priv_validator_state.json.backup $HOME/.junction/data/priv_validator_state.json

# 检查数据完整性
if [ ! -d "$HOME/.junction/data" ]; then
  echo "数据目录不存在，请检查快照下载是否成功。"
  exit 1
fi

# 重启服务并检查日志
check_and_repair_db
sudo systemctl restart junctiond
sleep 5

# 检查服务状态
if ! systemctl is-active --quiet junctiond; then
  echo "服务启动失败，请检查日志以获取更多信息。"
  sudo journalctl -u junctiond -n 50 --no-pager
  exit 1
fi

echo "服务已成功启动。请使用以下命令手动查看日志："
echo "sudo journalctl -u junctiond -f --no-hostname -o cat"








































































