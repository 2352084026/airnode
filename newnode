#!/bin/bash

# 更新并安装依赖
echo "更新和升级系统软件包..."
sudo apt update && sudo apt upgrade -y
echo "安装必要的软件包..."
sudo apt-get install git curl build-essential make jq gcc snapd chrony lz4 tmux unzip bc -y

# 安装 GO（amd64 - x86）
echo "删除任何现有的 GO 安装..."
rm -rf $HOME/go
sudo rm -rf /usr/local/go
echo "下载并安装 GO..."
cd $HOME
curl -L https://dl.google.com/go/go1.21.8.linux-amd64.tar.gz | sudo tar -C /usr/local -zxvf -
cat <<'EOF' >>$HOME/.profile
export GOROOT=/usr/local/go
export GOPATH=$HOME/go
export GO111MODULE=on
export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin
EOF
echo "重新加载配置文件以应用 GO 环境变量..."
source $HOME/.profile
echo "检查 GO 版本..."
go version

# 安装 Airchains（amd64）
echo "下载并安装 Airchains 的 junctiond..."
cd $HOME
wget https://github.com/airchains-network/junction/releases/download/v0.1.0/junctiond
chmod +x junctiond
sudo mv junctiond /usr/local/bin/
echo "检查 junctiond 版本..."
junctiond version

# 设置链条并命名空气链
echo "初始化链条并命名..."
junctiond init 333 --chain-id junction

# 下载 Genesis 和地址簿
echo "下载 Genesis 和地址簿..."
curl -Ls https://node39.top/testnet/airchains/genesis.json > $HOME/.junction/config/genesis.json
curl -Ls https://node39.top/testnet/airchains/addrbook.json > $HOME/.junction/config/addrbook.json

# 创建服务
echo "创建 junctiond 服务..."
sudo tee /etc/systemd/system/junctiond.service > /dev/null <<EOF
[Unit]
Description=junctiond
After=network-online.target
[Service]
User=root
ExecStart=/usr/local/bin/junctiond start --rpc.pprof_laddr "127.0.0.1:6061"
Restart=always
RestartSec=3
LimitNOFILE=65535
[Install]
WantedBy=multi-user.target
EOF

echo "重新加载 systemd 守护进程并启用 junctiond 服务..."
sudo systemctl daemon-reload
sudo systemctl enable junctiond

# 设置最低气体费用
echo "设置最低气体费用..."
sed -i 's|minimum-gas-prices =.*|minimum-gas-prices = "0.0001amf"|g' $HOME/.junction/config/app.toml

# 停止 junctiond 服务并重置节点
echo "停止 junctiond 服务并重置节点..."
sudo systemctl stop junctiond

cp $HOME/.junction/data/priv_validator_state.json $HOME/.junction/priv_validator_state.json.backup
junctiond tendermint unsafe-reset-all --home $HOME/.junction

# 配置状态同步
peers="47f61921b54a652ca5241e2a7fc4ed8663091e89@178.63.18.157:19656,c40528f5674b281dfe8a799ba2475782f0b889c7@178.18.240.22:43456,0d03e79ef79687421ac6f4b1ddd6add67dd2d6a0@65.109.83.40:28156,f9fef92013828d8669712224299136b4632b4904@65.109.113.228:60556,7962edd332b1a2293ba6c865aa1f001d6b7cc460@75.119.151.235:43456,560162c4502aea50d271b66d220fadeb5cd17038@37.27.68.29:22656,617df4eeca8779a83d980aba7ff6617bf05a6489@65.109.52.247:63656"

sed -i.bak -e "s/^persistent_peers *=.*/persistent_peers = \"$peers\"/" $HOME/.junction/config/config.toml 

SNAP_RPC="http://178.63.18.157:26657"
LATEST_HEIGHT=$(curl -s $SNAP_RPC/block | jq -r .result.block.header.height)
BLOCK_HEIGHT=$((LATEST_HEIGHT - 2000))
TRUST_HASH=$(curl -s "$SNAP_RPC/block?height=$BLOCK_HEIGHT" | jq -r .result.block_id.hash) 

if [ -z "$LATEST_HEIGHT" ] || [ -z "$BLOCK_HEIGHT" ] || [ -z "$TRUST_HASH" ]; then
    echo "无法获取区块信息，请检查 SNAP_RPC 地址或网络连接。"
    exit 1
fi

echo "最新高度: $LATEST_HEIGHT, 信任高度: $BLOCK_HEIGHT, 信任哈希: $TRUST_HASH"
sleep 2

sed -i.bak -E "s|^(enable[[:space:]]+=[[:space:]]+).*$|\1true| ;
s|^(rpc_servers[[:space:]]+=[[:space:]]+).*$|\1\"$SNAP_RPC,$SNAP_RPC\"| ;
s|^(trust_height[[:space:]]+=[[:space:]]+).*$|\1$BLOCK_HEIGHT| ;
s|^(trust_hash[[:space:]]+=[[:space:]]+).*$|\1\"$TRUST_HASH\"| ;
s|^(seeds[[:space:]]+=[[:space:]]+).*$|\1\"\"|" $HOME/.junction/config/config.toml

mv $HOME/.junction/priv_validator_state.json.backup $HOME/.junction/data/priv_validator_state.json

echo "重新启动 junctiond 服务并跟踪日志..."
sudo systemctl restart junctiond && sudo journalctl -u junctiond -f --no-hostname -o cat















































