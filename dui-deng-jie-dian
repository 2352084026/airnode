#!/bin/bash

# 更新和安装依赖
install_dependencies() {
  echo "检查并安装系统软件包和依赖..."
  sudo apt update && sudo apt upgrade -y
  if [ $? -ne 0 ]; then
    echo "更新系统软件包时出错" >> error.log
    exit 1
  fi
  sudo apt install -y clang pkg-config libssl-dev curl git wget htop tmux build-essential jq make lz4 gcc unzip
  if [ $? -ne 0 ]; then
    echo "安装依赖时出错" >> error.log
    exit 1
  fi
}

# 检查并安装 Go
install_go() {
  if ! command -v go &> /dev/null
  then
    echo "安装 Go..."
    cd $HOME
    sudo rm -rf /usr/local/go
    if [ $? -ne 0 ]; then
      echo "删除旧版本 Go 时出错" >> error.log
      exit 1
    fi
    echo "下载 Go 安装包..."
    curl -# -L https://go.dev/dl/go1.21.7.linux-amd64.tar.gz -o go1.21.7.linux-amd64.tar.gz
    if [ $? -ne 0 ]; then
      echo "下载 Go 安装包时出错" >> error.log
      exit 1
    fi
    sudo tar -xzf go1.21.7.linux-amd64.tar.gz -C /usr/local
    if [ $? -ne 0 ]; then
      echo "解压 Go 安装包时出错" >> error.log
      exit 1
    fi
    rm go1.21.7.linux-amd64.tar.gz
    eval $(echo 'export PATH=$PATH:/usr/local/go/bin' | sudo tee /etc/profile.d/golang.sh)
    eval $(echo 'export PATH=$PATH:$HOME/go/bin' | tee -a $HOME/.profile)
    source /etc/profile.d/golang.sh
    source $HOME/.profile
    go version
    if [ $? -ne 0 ]; then
      echo "安装 Go 失败" >> error.log
      exit 1
    fi
  else
    echo "Go 已安装，跳过安装步骤..."
  fi
}

# 设置变量
set_vars() {
  read -p "请输入你的节点名称 (MONIKER): " MONIKER
  echo "export MONIKER=$MONIKER" >> $HOME/.bash_profile
  echo "export AIR_CHAIN_ID=\"junction\"" >> $HOME/.bash_profile
  echo "export AIR_CHAIN_PORT=\"38\"" >> $HOME/.bash_profile
  source $HOME/.bash_profile
}

# 下载并配置二进制文件
setup_binary() {
  echo "下载并配置二进制文件..."
  if [ ! -f /usr/local/bin/junctiond ]; then
    wget https://github.com/airchains-network/junction/releases/download/v0.1.0/junctiond
    if [ $? -ne 0 ]; then
      echo "下载 junctiond 时出错" >> error.log
      exit 1
    fi
    chmod +x junctiond
    sudo mv junctiond /usr/local/bin
  else
    echo "junctiond 已安装，跳过安装步骤..."
  fi
}

# 初始化应用程序
init_app() {
  echo "初始化应用程序..."
  if [ ! -d "$HOME/.junction" ]; then
    junctiond init $MONIKER --chain-id $AIR_CHAIN_ID
    if [ $? -ne 0 ]; then
      echo "初始化应用程序时出错" >> error.log
      exit 1
    fi
  fi
  wget -O $HOME/.junction/config/genesis.json https://testnet-files.syanodes.my.id/airchain-genesis.json
  if [ $? -ne 0 ]; then
    echo "下载 genesis.json 时出错" >> error.log
    exit 1
  fi
  wget -O $HOME/.junction/config/addrbook.json https://testnet-files.syanodes.my.id/airchain-addrbook.json
  if [ $? -ne 0 ]; then
    echo "下载 addrbook.json 时出错" >> error.log
    exit 1
  fi
}

# 配置种子和对等节点
configure_peers() {
  echo "配置种子和对等节点..."
  SEEDS=""
  PEERS="95269b45ec3a7013ca6e213723fb13217c3c7fb8@airchain-t-rpc.syanodes.my.id:38656,de2e7251667dee5de5eed98e54a58749fadd23d8@34.22.237.85:26656,1918bd71bc764c71456d10483f754884223959a5@35.240.206.208:26656,48887cbb310bb854d7f9da8d5687cbfca02b9968@35.200.245.190:26656,de2e7251667dee5de5eed98e54a58749fadd23d8@34.22.237.85:26656,8b72b2f2e027f8a736e36b2350f6897a5e9bfeaa@131.153.232.69:26656,d92c7efcb453ba2edab6d80ad6e3b692e3a7e4f5@49.13.120.225:26656,5c5989b5dee8cff0b379c4f7273eac3091c3137b@57.128.74.22:56256,e09fa8cc6b06b99d07560b6c33443023e6a3b9c6@65.21.131.187:26656,0305205b9c2c76557381ed71ac23244558a51099@162.55.65.162:26656,3e5f3247d41d2c3ceeef0987f836e9b29068a3e9@168.119.31.198:56256,086d19f4d7542666c8b0cac703f78d4a8d4ec528@135.148.232.105:26656,47f61921b54a652ca5241e2a7fc4ed8663091e89@airchains-testnet-peer.itrocket.net:19656,aeaf101d54d47f6c99b4755983b64e8504f6132d@65.21.202.124:28656,df2a56a208821492bd3d04dd2e91672657c79325@158.220.126.137:27656,82af620ee9eeb2d2902ae66188eb4aa163ca8562@135.181.35.159:63656,f315edae9ff8543c50e764627a6495dfdaceb3bb@37.60.224.165:63656,c2e70f94ed3f7fa027ffad7f051c4d4688be1ee6@195.26.255.211:10056,264493e01774cccdb9baabee4af7146acbec67f2@65.21.193.80:63656,e3f6f7701541bd2ea183a34b061e33bfaf69ae3d@144.91.69.202:63656,613a65fe67918a5912f0cc22ef535ed1a8f0e824@65.109.112.148:4476,976a0fe0a0fa205478beb66addaae3842907c3f6@37.27.48.77:32656,7d6694fb464a9c9761992f695e6ba1d334403986@164.90.228.66:26656,b2e9bebc16bc35e16573269beba67ffea5932e13@95.111.239.250:26656,23152e91e3bd642bef6508c8d6bd1dbedccf9e56@95.111.237.24:26656,c1e9d12d80ec74b8ddbabdec9e0dad71337ba43f@135.181.82.176:26656,3b429f2c994fa76f9443e517fd8b72dcf60e6590@37.27.11.132:26656,84b6ccf69680c9459b3b78ca4ba80313fa9b315a@159.69.208.30:26656,e78a440c57576f3743e6aa9db00438462980927e@5.161.199.115:26656,49fb1316b22c71e455720af15dd552dafb9af39a@5.189.151.175:26656,e831fa909cce0d1807cfcf417e28e782530f5c94@161.97.66.254:26666,db38d672f66df4de01b26e1fa97e1632fbfb1bdf@173.249.57.190:26656,08a0014125bded5fe76b9dc3275b0a58b6841b43@116.203.184.36:26656,6025c1523ad0cd6926ef277cfcf46d82ebb43c21@116.203.24.46:26656,fed2e80e159a23bf9f71f980b501c2304cec2f6d@185.194.216.61:17656,1ad9bdeac0b06f585a9c64261d0705c4cbfd28e7@144.91.99.93:26656,a6384bd23bd728ffa9a8452b12fc865dadf51672@81.200.154.160:26656,5b31fdf605645b44ad615c8b79b1550540895fe5@35.214.147.230:26656,6a3a13d7631823eb6dcd00882243c913c819a125@38.242.196.100:26656,3e182e463425dfa6d4cef83f4bdd67c98c36eba3@195.26.243.208:47656,c97c7a9c11cf3cb059ce89c36f7ff219daa3ada4@195.26.246.26:26656,7d162ef2392d25720d7cdb2cfdf2ccf146e32bac@49.13.234.149:26656,5a161464aa73571f1b7e22204bcf3bdb6fb71f3b@195.26.241.184:26656,bff7c802021ed3b4aaf222da9d42280bfc5dad88@65.109.139.181:26656,c284cbda3ab197001136c39c9df8e45af2038513@34.93.143.222:26656,449297568d9d6d4aa51a93f7a1b1e92e1ec38619@65.108.242.9:26656,611440c7193678ec1cd0c60b55abfca07dfa27cd@95.217.161.97:26656,beec52199d4b28cab6fc3b2f2a2718c6667ac46a@37.27.19.95:26656,226b9c42e81cddd185d435348cd89f87fee37279@135.181.42.46:26656,479b63df84e247c55e80cccd9abbf7100a334fcc@65.108.156.83:26656"
  sed -i -e "s/^seeds *=.*/seeds = \"$SEEDS\"/; s/^persistent_peers *=.*/persistent_peers = \"$PEERS\"/" $HOME/.junction/config/config.toml
  sed -i -e "s/^minimum-gas-prices *=.*/minimum-gas-prices = \"0amf\"/" $HOME/.junction/config/app.toml
  sed -i -e 's|^indexer *=.*|indexer = "null"|' $HOME/.junction/config/config.toml
  sed -i 's|^prometheus *=.*|prometheus = true|' $HOME/.junction/config/config.toml
}

# 配置修剪设置
configure_pruning() {
  echo "配置修剪设置..."
  pruning="custom"
  pruning_keep_recent="100"
  pruning_keep_every="0"
  pruning_interval="19"
  sed -i -e "s/^pruning *=.*/pruning = \"$pruning\"/" $HOME/.junction/config/app.toml
  sed -i -e "s/^pruning-keep-recent *=.*/pruning-keep-recent = \"$pruning_keep_recent\"/" $HOME/.junction/config/app.toml
  sed -i -e "s/^pruning-keep-every *=.*/pruning-keep-every = \"$pruning_keep_every\"/" $HOME/.junction/config/app.toml
  sed -i -e "s/^pruning-interval *=.*/pruning-interval = \"$pruning_interval\"/" $HOME/.junction/config/app.toml
}

# 配置自定义端口
configure_ports() {
  echo "配置自定义端口..."
  sed -i.bak -e "s%:1317%:${AIR_CHAIN_PORT}317%g;
  s%:8080%:${AIR_CHAIN_PORT}080%g;
  s%:9090%:${AIR_CHAIN_PORT}090%g;
  s%:9091%:${AIR_CHAIN_PORT}091%g;
  s%:8545%:${AIR_CHAIN_PORT}545%g;
  s%:8546%:${AIR_CHAIN_PORT}546%g;
  s%:6065%:${AIR_CHAIN_PORT}065%g" $HOME/.junction/config/app.toml
  sed -i.bak -e "s%:26658%:${AIR_CHAIN_PORT}658%g;
  s%:26657%:${AIR_CHAIN_PORT}657%g;
  s%:6060%:${AIR_CHAIN_PORT}060%g;
  s%:26656%:${AIR_CHAIN_PORT}656%g;
  s%^external_address = \"\"%external_address = \"$(wget -qO- eth0.me):${AIR_CHAIN_PORT}656\"%;
  s%:26660%:${AIR_CHAIN_PORT}660%g" $HOME/.junction/config/config.toml
  sed -i \
    -e 's|^chain-id *=.*|chain-id = "junction"|' \
    -e 's|^keyring-backend *=.*|keyring-backend = "test"|' \
    -e 's|^node *=.*|node = "tcp://localhost:38657"|' \
    $HOME/.junction/config/client.toml
}

# 设置服务文件
setup_service() {
  echo "设置服务文件..."
  sudo tee /etc/systemd/system/junctiond.service > /dev/null <<EOF
[Unit]
Description=airchain-testnet
After=network-online.target

[Service]
User=$USER
ExecStart=$(which junctiond) start --home $HOME/.junction
Restart=on-failure
RestartSec=3
LimitNOFILE=65535

[Install]
WantedBy=multi-user.target
EOF

  sudo systemctl daemon-reload
  sudo systemctl enable junctiond
  sudo systemctl start junctiond
  if [ $? -ne 0 ]; then
    echo "启动 junctiond 服务时出错" >> error.log
    exit 1
  fi
  sudo journalctl -fu junctiond -o cat
}

# 停止并重置节点
reset_node() {
  echo "停止并重置节点..."
  sudo systemctl stop junctiond
  if [ $? -ne 0 ]; then
    echo "停止 junctiond 服务时出错" >> error.log
    exit 1
  fi
  cp $HOME/.junction/data/priv_validator_state.json $HOME/.junction/priv_validator_state.json.backup
  junctiond tendermint unsafe-reset-all --home $HOME/.junction
  if [ $? -ne 0 ]; then
    echo "重置节点时出错" >> error.log
    exit 1
  fi
}

# 配置状态同步
configure_state_sync() {
  echo "配置状态同步..."
  peers="054b081a861d7613273b0ceb4baab62784995820@144.126.132.101:38656:38656,de2e7251667dee5de5eed98e54a58749fadd23d8@34.22.237.85:26656,1918bd71bc764c71456d10483f754884223959a5@35.240.206.208:26656,48887cbb310bb854d7f9da8d5687cbfca02b9968@35.200.245.190:26656,de2e7251667dee5de5eed98e54a58749fadd23d8@34.22.237.85:26656,8b72b2f2e027f8a736e36b2350f6897a5e9bfeaa@131.153.232.69:26656,d92c7efcb453ba2edab6d80ad6e3b692e3a7e4f5@49.13.120.225:26656,5c5989b5dee8cff0b379c4f7273eac3091c3137b@57.128.74.22:56256,e09fa8cc6b06b99d07560b6c33443023e6a3b9c6@65.21.131.187:26656,0305205b9c2c76557381ed71ac23244558a51099@162.55.65.162:26656,3e5f3247d41d2c3ceeef0987f836e9b29068a3e9@168.119.31.198:56256,086d19f4d7542666c8b0cac703f78d4a8d4ec528@135.148.232.105:26656,47f61921b54a652ca5241e2a7fc4ed8663091e89@airchains-testnet-peer.itrocket.net:19656,aeaf101d54d47f6c99b4755983b64e8504f6132d@65.21.202.124:28656,df2a56a208821492bd3d04dd2e91672657c79325@158.220.126.137:27656,82af620ee9eeb2d2902ae66188eb4aa163ca8562@135.181.35.159:63656,f315edae9ff8543c50e764627a6495dfdaceb3bb@37.60.224.165:63656,c2e70f94ed3f7fa027ffad7f051c4d4688be1ee6@195.26.255.211:10056,264493e01774cccdb9baabee4af7146acbec67f2@65.21.193.80:63656,e3f6f7701541bd2ea183a34b061e33bfaf69ae3d@144.91.69.202:63656,613a65fe67918a5912f0cc22ef535ed1a8f0e824@65.109.112.148:4476,976a0fe0a0fa205478beb66addaae3842907c3f6@37.27.48.77:32656,7d6694fb464a9c9761992f695e6ba1d334403986@164.90.228.66:26656,b2e9bebc16bc35e16573269beba67ffea5932e13@95.111.239.250:26656,23152e91e3bd642bef6508c8d6bd1dbedccf9e56@95.111.237.24:26656,c1e9d12d80ec74b8ddbabdec9e0dad71337ba43f@135.181.82.176:26656,3b429f2c994fa76f9443e517fd8b72dcf60e6590@37.27.11.132:26656,84b6ccf69680c9459b3b78ca4ba80313fa9b315a@159.69.208.30:26656,e78a440c57576f3743e6aa9db00438462980927e@5.161.199.115:26656,49fb1316b22c71e455720af15dd552dafb9af39a@5.189.151.175:26656,e831fa909cce0d1807cfcf417e28e782530f5c94@161.97.66.254:26666,db38d672f66df4de01b26e1fa97e1632fbfb1bdf@173.249.57.190:26656,08a0014125bded5fe76b9dc3275b0a58b6841b43@116.203.184.36:26656,6025c1523ad0cd6926ef277cfcf46d82ebb43c21@116.203.24.46:26656,fed2e80e159a23bf9f71f980b501c2304cec2f6d@185.194.216.61:17656,1ad9bdeac0b06f585a9c64261d0705c4cbfd28e7@144.91.99.93:26656,a6384bd23bd728ffa9a8452b12fc865dadf51672@81.200.154.160:26656,5b31fdf605645b44ad615c8b79b1550540895fe5@35.214.147.230:26656,6a3a13d7631823eb6dcd00882243c913c819a125@38.242.196.100:26656,3e182e463425dfa6d4cef83f4bdd67c98c36eba3@195.26.243.208:47656,c97c7a9c11cf3cb059ce89c36f7ff219daa3ada4@195.26.246.26:26656,7d162ef2392d25720d7cdb2cfdf2ccf146e32bac@49.13.234.149:26656,5a161464aa73571f1b7e22204bcf3bdb6fb71f3b@195.26.241.184:26656,bff7c802021ed3b4aaf222da9d42280bfc5dad88@65.109.139.181:26656,c284cbda3ab197001136c39c9df8e45af2038513@34.93.143.222:26656,449297568d9d6d4aa51a93f7a1b1e92e1ec38619@65.108.242.9:26656,611440c7193678ec1cd0c60b55abfca07dfa27cd@95.217.161.97:26656,beec52199d4b28cab6fc3b2f2a2718c6667ac46a@37.27.19.95:26656,226b9c42e81cddd185d435348cd89f87fee37279@135.181.42.46:26656,479b63df84e247c55e80cccd9abbf7100a334fcc@65.108.156.83:26656"
  SNAP_RPC="https://airchain-t-rpc.syanodes.my.id:443"

  sed -i.bak -e "s/^persistent_peers *=.*/persistent_peers = \"$peers\"/" $HOME/.junction/config/config.toml 

  LATEST_HEIGHT=$(curl -s $SNAP_RPC/block | jq -r .result.block.header.height)
  if [ $? -ne 0 ]; then
    echo "获取最新区块高度时出错" >> error.log
    exit 1
  fi
  BLOCK_HEIGHT=$((LATEST_HEIGHT - 1000))
  TRUST_HASH=$(curl -s "$SNAP_RPC/block?height=$BLOCK_HEIGHT" | jq -r .result.block_id.hash)
  if [ $? -ne 0 ]; then
    echo "获取信任区块哈希时出错" >> error.log
    exit 1
  fi

  echo $LATEST_HEIGHT $BLOCK_HEIGHT $TRUST_HASH && sleep 2

  sed -i.bak -E "s|^(enable[[:space:]]+=[[:space:]]+).*$|\1true| ;
  s|^(rpc_servers[[:space:]]+=[[:space:]]+).*$|\1\"$SNAP_RPC,$SNAP_RPC\"| ;
  s|^(trust_height[[:space:]]+=[[:space:]]+).*$|\1$BLOCK_HEIGHT| ;
  s|^(trust_hash[[:space:]]+=[[:space:]]+).*$|\1\"$TRUST_HASH\"| ;
  s|^(seeds[[:space:]]+=[[:space:]]+).*$|\1\"\"|" $HOME/.junction/config/config.toml

  mv $HOME/.junction/priv_validator_state.json.backup $HOME/.junction/data/priv_validator_state.json

  sudo systemctl restart junctiond
  if [ $? -ne 0 ]; then
    echo "重启 junctiond 服务时出错" >> error.log
    exit 1
  fi
  sudo journalctl -u junctiond -f --no-hostname -o cat
}

# 删除所有内容
cleanup() {
  echo "删除之前下载的所有内容..."
  sudo systemctl stop junctiond
  if [ $? -ne 0 ]; then
    echo "停止 junctiond 服务时出错" >> error.log
  fi
  sudo systemctl disable junctiond
  sudo rm /etc/systemd/system/junctiond.service
  sudo systemctl daemon-reload
  sudo rm -rf /usr/local/bin/junctiond $HOME/.junction $HOME/go /usr/local/go
}

# 菜单选项
menu() {
  echo "1. 安装节点"
  echo "2. 删除之前下载的所有内容"
  echo "3. 钱包管理"
  echo "4. 验证者管理"
  echo "5. 代币管理"
  echo "6. 治理"
  echo "7. 服务管理"
  echo "8. 公用事业"
  echo "9. 退出"
  read -p "请选择一个选项: " choice

  case $choice in
    1)
      install_dependencies
      install_go
      set_vars
      setup_binary
      init_app
      configure_peers
      configure_pruning
      configure_ports
      setup_service
      configure_state_sync
      ;;
    2)
      cleanup
      ;;
    3)
      echo "钱包管理选项"
      # 钱包管理选项逻辑
      ;;
    4)
      echo "验证者管理选项"
      # 验证者管理选项逻辑
      ;;
    5)
      echo "代币管理选项"
      # 代币管理选项逻辑
      ;;
    6)
      echo "治理选项"
      # 治理选项逻辑
      ;;
    7)
      echo "服务管理选项"
      # 服务管理选项逻辑
      ;;
    8)
      echo "公用事业选项"
      # 公用事业选项逻辑
      ;;
    9)
      exit 0
      ;;
    *)
      echo "无效选项，请重试。"
      menu
      ;;
  esac
}

# 显示菜单
menu

















